/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */
plugins {
    // https://github.com/jeremylong/dependency-check-gradle
    id "org.owasp.dependencycheck" version "5.3.2.1"
}
configurations {
    jacoco
    jacocoRuntime
}
dependencies {
    jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: "${jacocoVersion}", classifier: 'nodeps'
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: "${jacocoVersion}", classifier: 'runtime'
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}
subprojects {
    //TODO: figure out why so many extra outputs (in non-project build directories), why all the reports appear the same
    apply plugin: 'org.owasp.dependencycheck'
    dependencyCheck {
        outputDirectory = "${buildDir}/security-report"
        format = "ALL"
    }

    // task to increment the build version of sub projects
    task incrementBuildVersion {
        group "build"
        description "Increments the build number in the version config."

        doLast {
            def doBuildIncrement = false;
            if(doBuildIncrement) {
                def ver = version
                String lastNumber = ver.substring(ver.lastIndexOf('.') + 1)
                int increment = lastNumber.toInteger() + 1

                String firstNumber = ver.substring(0, ver.lastIndexOf("."))
                String result = buildFile.getText().replaceFirst("version = '$version'", "version = '" + firstNumber + "." + increment + "'")
                buildFile.setText(result)
            }
        }
    }

    configurations {
        jacoco
        jacocoRuntime
        jacocoInstrumented
    }

    dependencies {
        jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: "${jacocoVersion}", classifier: 'nodeps'
        jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: "${jacocoVersion}", classifier: 'runtime'
    }

    task preprocessClassesForJacoco(dependsOn: ['classes']) {
        ext.outputDir = buildDir.path + '/classes-instrumented'
        doLast {
            ant.taskdef(name: 'instrument',
                    classname: 'org.jacoco.ant.InstrumentTask',
                    classpath: configurations.jacoco.asPath)
            ant.instrument(destdir: outputDir) {
                fileset(dir: sourceSets.main.java.outputDir, includes: '**/*.class', erroronmissingdir: false)
            }
        }
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(preprocessClassesForJacoco)) {
            tasks.withType(Test) {
                doFirst {
                    systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
                    classpath -= files(sourceSets.main.java.outputDir)
                    classpath += files(preprocessClassesForJacoco.outputDir) + configurations.jacocoRuntime

                    def modulesDependencies = moduleDependencies(project)
                    classpath -= files(modulesDependencies.jar.outputs.files)
                    classpath += files(modulesDependencies.jacocoInstrumentedJar.outputs.files)
                }
            }
        }
    }

    task jacocoInstrumentedJar(type: Jar, dependsOn: [preprocessClassesForJacoco]) {
        baseName "${project.name}-instrumented"
        from preprocessClassesForJacoco.outputDir
    }

    test.dependsOn preprocessClassesForJacoco
    test.dependsOn jacocoInstrumentedJar

    artifacts {
        jacocoInstrumented jacocoInstrumentedJar
    }



}

def moduleDependencies(Project project) {
    ConfigurationContainer configurations = project.configurations
    Configuration configuration = configurations.compile

    DomainObjectSet<ProjectDependency> projectDependencies = configuration.dependencies.withType ProjectDependency
    def modules = []
    projectDependencies.forEach {
        modules += it.dependencyProject
        modules += moduleDependencies(it.dependencyProject)
    }
    return modules
}

// TODO:: figure out why we don't get full coverage in jacoco
task codeCoverageReport(type: JacocoReport) {
    group "verification"
    description "Builds the coverage report from all sub projects' coverage reports."

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
//        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled true
    }
}
codeCoverageReport.dependsOn {
    subprojects*.test
}

/**
 * Task to update the gradle wrapper to the version set.
 */
task updateWrapper(type: Wrapper) {
    group "wrapper"
    description "Rebuilds the wrapper with the version set. Use to update to new versions of Gradle"
    gradleVersion = '6.3'
}
