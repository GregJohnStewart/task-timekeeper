plugins {
    id 'java'
    id 'application'

    // https://github.com/i-net-software/SetupBuilder
    id "de.inetsoftware.setupbuilder" version "4.8.6"
}

sourceCompatibility = 1.11
//config for the application plugin. The last number (build #) is auto generated on assembly of the code. (see "incrementBuildVersion" task)
version = '0.1.1.587'
mainClassName = "com.gjs.taskTimekeeper.desktopApp.Main"
applicationName = "TaskTimekeeper"
//logo location information
def logoDir = "../logo/generated/desktop-app/"
def guiIconFile = "gui-icon.png"
def desktopIconFile = "desktop-icon.icn"
//important urls
def gitHubUrl = "https://github.com/GregJohnStewart/task-timekeeper"
def progDesc = "An open source program for keeping track of time spent on tasks. Github: " + gitHubUrl
description = progDesc

repositories {
    mavenCentral()
}

dependencies {
    compile project(":BaseCode")

    //for processing command line arguments
    compile 'args4j:args4j:2.33'
    compile 'args4j:args4j-site:2.33'

    //for the intellij swing forms
    compile 'com.intellij:forms_rt:7.0.3'
    // https://mvnrepository.com/artifact/com.dorkbox/SystemTray
    //compile group: 'com.dorkbox', name: 'SystemTray', version: '3.17'
    // https://mvnrepository.com/artifact/tablelayout/TableLayout
    // https://www.clearthought.info/sun/products/jfc/tsc/articles/tablelayout/Sizes.html#Absolute
    compile group: 'tablelayout', name: 'TableLayout', version: '20050920'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

run {
    /*
	 * So we can have arguments passed to the program in gradle
	 *
	 * Example of usage:
	 *      gradle :DesktopApp:run -PappArgs="['-h']"
	 */
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

String projectPropertiesFileName = "project.properties";
String projectResourcesDir = "$projectDir/src/main/resources/";

task copyInLogos() {
    doLast {
        copy {
            from logoDir
            include guiIconFile
            into projectResourcesDir
        }
    }
}

/**
 * Writes out the version configuration for the app.
 */
//noinspection GroovyAssignabilityCheck
task writePropertiesFile() {
    doLast {
        new File(projectResourcesDir + projectPropertiesFileName).text = """
################################################################
#                                                              #
# Main properties file. Contains values used in the app.       #
#                                                              #
# AUTOGENERATED BY GRADLE AT BUILD TIME. DO NOT EDIT THIS FILE #
#                                                              #
################################################################

# the name of the app
app.name = $applicationName
# the version of the app code
app.version = $version
# the time of build
app.buildtime = ${ZonedDateTime.now().toString()}
# Version of the library used
lib.version = ${project(":BaseCode").version}

# default save file location
default.configFile = {HOME}/.timeKeeper/config.cfg
default.saveFile = {HOME}/.timeKeeper/save.tks
# default run mode
default.runMode = SINGLE

# static file names
static.guiIconFile = $guiIconFile

# Help and other url's
urls.github = $gitHubUrl
urls.desktopReadme = ${gitHubUrl}/tree/master/DesktopApp
urls.donateUrl = https://gjstewart.net/donate.html
"""
    }
}

task deleteGenertatedResources(type: Delete) {
    delete fileTree(projectResourcesDir) {
        include "**/$projectPropertiesFileName"
        include "**/gui-icon.*"
    }
}

task incrementBuildVersion {
    group "build"
    description "Increments the build number in the version config."

    doLast {
        def ver = version
        //println ver
        String lastNumber = ver.substring(ver.lastIndexOf('.') + 1)
        int increment = lastNumber.toInteger() + 1
        //println "Build number: " + increment

        String firstNumber = ver.substring(0, ver.lastIndexOf("."))
        //println firstNumber
        String result = buildFile.getText().replaceFirst("version = '$version'", "version = '" + firstNumber + "." + increment + "'")
        buildFile.setText(result)
    }
}

compileJava {
    println "DesktopApp version at compile time: " + version
    dependsOn 'writePropertiesFile';
    dependsOn 'copyInLogos';
    dependsOn ':BaseCode:test'
    dependsOn 'incrementBuildVersion';
}

clean {
    dependsOn 'deleteGenertatedResources';
}

jar {
    dependsOn ':BaseCode:build'
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Multi-Release': true
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/*
 * Setup for building .deb, .dmg, .msi, and .rpm installers.
 * https://github.com/i-net-software/SetupBuilder/wiki/DSL-of-setupBuilder
 */
setupBuilder {
    vendor = 'Greg Stewart'
    appIdentifier = applicationName  // "TaskTimekeeper"
    this.version = version // '0.1'

    application = "Task Timekeeper"
    description = progDesc
    icons = (String)logoDir + desktopIconFile

    licenseFile = "../LICENSE"

    from jar.outputs

    //bundleJre = 1.11 // not working on linux systems :(
    mainClass = mainClassName // "com.gjs.taskTimekeeper.desktopApp.Main"
    mainJar = 'DesktopApp-' + version + '.jar'

    // https://github.com/i-net-software/SetupBuilder/wiki/DSL-of-desktopStarter
    //TODO:: associate file type
    desktopStarter {
        displayName = "Task Timekeeper GUI"
        description = progDesc + "\nThis opens the program in GUI mode."
        //TODO:: use -Xdock:name="Foo Bar" to set real name
        startArguments = "--mode GUI"

        // Categories of the application (only for deb and rpm) TODO:: what categories are there?
        //categories = "software;game"

        // Where should this desktopStarter item be placed? (Windows only)
        //location = StartMenu

        // The working directory of the service, relative to installation root
        workDir = "."
    }
    desktopStarter {
        displayName = "tasktimekeeper"
        description = progDesc

        // Categories of the application (only for deb and rpm) TODO:: what categories are there?
        //categories = "software;game"

        // The working directory of the service, relative to installation root
        workDir = "."
    }
}
