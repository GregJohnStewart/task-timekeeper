package com.gjs.taskTimekeeper.desktopApp.runner.gui.forms;

import com.gjs.taskTimekeeper.backend.TimeManager;
import com.gjs.taskTimekeeper.backend.crudAction.actionDoer.ActionDoer;
import com.gjs.taskTimekeeper.desktopApp.config.ConfigKeys;
import com.gjs.taskTimekeeper.desktopApp.config.Configuration;
import com.gjs.taskTimekeeper.desktopApp.managerIO.ManagerIO;
import com.gjs.taskTimekeeper.desktopApp.runner.gui.util.listener.OpenDialogBoxOnClickListener;
import com.gjs.taskTimekeeper.desktopApp.runner.gui.util.listener.OpenUrlOnClickListener;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.net.URI;

/**
 * https://www.jetbrains.com/help/idea/designing-gui-major-steps.html
 */
public class MainGui {
	private static final Logger LOGGER = LoggerFactory.getLogger(MainGui.class);

	private static final String ABOUT_MESSAGE = "Task Timekeeper\n\nVersion: " + Configuration.getProperty(ConfigKeys.APP_VERSION, String.class) +
		                                            "\nUsing Lib version: " + Configuration.getProperty(ConfigKeys.LIB_VERSION, String.class) +
		                                            "\n\nThis program is made for you to easily keep track of time spent on tasks." +
		                                            "\nFor help, please visit the Github for this project." +
		                                            "\nPlease consider donating if you find this program was helpful to you!";

	private TimeManager manager;
	private boolean changed = false;

	private final String origTitle;
	private JFrame mainFrame;

	private JPanel mainPanel;
	private JTabbedPane mainTabPane;
	private JPanel selectedPeriodPanel;
	private JPanel periodsPanel;
	private JPanel tasksPanel;
	private JPanel selectedPeriodBannerPanel;
	private JPanel selectedPeriodTaskStatPanel;
	private JPanel selectedPeriodSpansPanel;

	private JMenuBar mainMenuBar;

	public MainGui(Image icon, String appTitle) {
		LOGGER.info("Starting GUI.");
		this.origTitle = appTitle;

		//setup main frame
		this.mainFrame = new JFrame();
		this.mainFrame.setIconImage(icon);
		this.mainFrame.setContentPane(this.mainPanel);
		this.mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//TODO:: tell action handler to not kill process when window closes. not a problem until we do the system tray icon.

		//setup menu bar
		this.mainMenuBar = new JMenuBar();
		//File
		JMenu menu = new JMenu("File");
		JMenuItem menuItem = new JMenuItem("Save (ctrl + s)");
		menu.add(menuItem);
		//TODO:: auto save checkbox
		menu.addSeparator();
		menuItem = new JMenuItem("Close");
		menu.add(menuItem);
		this.mainMenuBar.add(menu);
		//info
		menu = new JMenu("Info");
		menuItem = new JMenuItem("About");
		menuItem.addMouseListener(
			new OpenDialogBoxOnClickListener(
				this.mainFrame,
				ABOUT_MESSAGE,
				"About Task Timekeeper",
				JOptionPane.INFORMATION_MESSAGE,
				icon
			)
		);
		menu.add(menuItem);
		menu.addSeparator();
		menuItem = new JMenuItem("Github");
		menuItem.addMouseListener(
			new OpenUrlOnClickListener(
				URI.create(Configuration.getProperty(ConfigKeys.GITHUB_REPO_URL, String.class))
			)
		);
		menu.add(menuItem);
		menuItem = new JMenuItem("Donate");
		menuItem.addMouseListener(
			new OpenUrlOnClickListener(
				URI.create(Configuration.getProperty(ConfigKeys.DONATE_URL, String.class))
			)
		);
		menu.add(menuItem);
		this.mainMenuBar.add(menu);

		this.mainFrame.setJMenuBar(this.mainMenuBar);
		this.reloadData();

		this.mainFrame.pack();
		this.mainFrame.setVisible(true);

		LOGGER.info("Opened window");
	}

	public boolean stillOpen() {
		return this.mainFrame.isVisible();
	}

	private void reloadData(){
		//read in new manager
		//TODO:: handle errors
		this.manager = ManagerIO.loadTimeManager();
		this.changed = false;

		ActionDoer.resetDoers();
		ActionDoer.setNewestPeriodAsSelectedQuiet(this.manager);

		this.updateUiData();
	}

	private void wasUpdated(boolean wasUpdated){
		this.changed = this.changed || wasUpdated;
		this.updateUiData();
	}

	private void saveData(){
		//TODO:: handle errors
		ManagerIO.saveTimeManager(this.manager);
		this.changed = false;
		this.updateUiData();
	}

	private void updateUiData(){
		if(this.changed){
			this.mainFrame.setTitle(this.origTitle + " *");
		} else {
			this.mainFrame.setTitle(this.origTitle);
		}
		//TODO:: rest of this
	}


	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.setMinimumSize(new Dimension(500, 500));
		mainPanel.setPreferredSize(new Dimension(500, 500));
		mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null));
		mainTabPane = new JTabbedPane();
		mainPanel.add(mainTabPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
		selectedPeriodPanel = new JPanel();
		selectedPeriodPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		mainTabPane.addTab("Selected Period", selectedPeriodPanel);
		selectedPeriodBannerPanel = new JPanel();
		selectedPeriodBannerPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		selectedPeriodPanel.add(selectedPeriodBannerPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 100), new Dimension(-1, 100), new Dimension(-1, 100), 0, false));
		selectedPeriodBannerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Period"));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		selectedPeriodPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		selectedPeriodSpansPanel = new JPanel();
		selectedPeriodSpansPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(selectedPeriodSpansPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		selectedPeriodSpansPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Spans"));
		selectedPeriodTaskStatPanel = new JPanel();
		selectedPeriodTaskStatPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(selectedPeriodTaskStatPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(250, -1), new Dimension(250, -1), new Dimension(250, -1), 0, false));
		selectedPeriodTaskStatPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Task Stats"));
		periodsPanel = new JPanel();
		periodsPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		mainTabPane.addTab("Periods", periodsPanel);
		final JLabel label1 = new JLabel();
		label1.setText("Period pane");
		periodsPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		periodsPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		periodsPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		tasksPanel = new JPanel();
		tasksPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		mainTabPane.addTab("Tasks", tasksPanel);
		final JLabel label2 = new JLabel();
		label2.setText("Tasks pane");
		tasksPanel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		tasksPanel.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		tasksPanel.add(spacer4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}

}
